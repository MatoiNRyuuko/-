给定二叉搜索树(BST)，将其转换为更大的树，使原始BST上每个节点的值都更改为在原始树中大于等于该节点值的节点值之和(包括该节点)。

样例
Given a binary search Tree `{5,2,13}｀:

              5
            /   \
           2     13
Return the root of new tree

             18
            /   \
          20     13


思路：二叉搜索树的性质是左结点包括左子树的全部结点都小于根结点，右结点和右子树的全部结点都大于根结点。
那么就能推出这棵树最大结点在树的右下角。再由题目推出根结点的值是左子树的值加上自己。左结点的值是根结点
值加右结点值。

得出以上结论后，先递归遍历树的右结点，将值赋给根结点后，遍历左结点。

对于每个子树的值获取顺序都是:先将右结点的值获取，根结点的值加上右结点的值，左结点的值是根结点和右结点值之和加自己。

说起来很麻烦，但是只要看代码用递归就简单了。
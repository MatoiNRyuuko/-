1.猫狗队列。
猫狗类继承自pet类。pet类里边有count用来当做时间戳。每次猫狗进队列的时候count++。当需要弹出宠物队列中的最早
宠物时，比较猫和狗的时间戳，根据时间戳最小来弹出。

2.二叉树先序遍历非递归。
先序遍历：中左右。
用栈，先压头结点，判断先压右结点进栈，再压左结点进栈。因为是栈的特性后进先出，所以后压的结点会先弹出。
那么就是左结点会先弹出，形成一个先序遍历。

3.二叉树的中序遍历。
中序遍历：左中右。
同样用栈，压入头节点，头节点往左节点走，继续压入。一直压到左节点为空，压入右节点。代码的实现：
while(!stack.isEmpty()||head!=null)用来判断，当头节点一直往左边走，走到头时，head==null但是栈不等于空。
不等于空时就弹出，弹出的就是头节点，压入头节点的右节点。这样循环就完成了中序遍历。

4.二叉树的后序遍历非递归。
后续遍历：左右中。用两个栈实现，第一个栈的作用是中右左的遍历。在非递归的树打印过程是：把节点弹出栈并打印。
这里的第一个栈中进行先序遍历的时候，弹出不打印，把他放到第二个栈之中。那么第二个栈的进栈顺序是 中->右->左。
弹出顺序是左右中，就符合了后序遍历的需求。


3.为什么用栈实现二叉树的遍历。
因为二叉树的结构决定了二叉树只能用上往下走，将结点一个一个压入栈，那么通过栈的弹出操作就能获取到之前压入的
结点，也就相当于实现了二叉树的从下往上走。